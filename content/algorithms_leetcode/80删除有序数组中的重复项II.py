# -*- coding:utf-8 -*-
# @UpdateTime : 2021/4/6 3:11 下午
# @Author : a27
"""
给你一个有序数组 nums ，请你 原地 删除重复出现的元素，使每个元素 最多出现两次 ，返回删除后数组的新长度。

不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。

 

说明：

为什么返回数值是整数，但输出的答案是数组呢？

请注意，输入数组是以「引用」方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。

你可以想象内部操作如下:

// nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝
int len = removeDuplicates(nums);

// 在函数里修改输入数组对于调用者是可见的。
// 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。
for (int i = 0; i < len; i++) {
    print(nums[i]);
}
 

示例 1：

输入：nums = [1,1,1,2,2,3]
输出：5, nums = [1,1,2,2,3]
解释：函数应返回新长度 length = 5, 并且原数组的前五个元素被修改为 1, 1, 2, 2, 3 。 不需要考虑数组中超出新长度后面的元素。
示例 2：

输入：nums = [0,0,1,1,1,1,2,3,3]
输出：7, nums = [0,0,1,1,2,3,3]
解释：函数应返回新长度 length = 7, 并且原数组的前五个元素被修改为 0, 0, 1, 1, 2, 3, 3 。 不需要考虑数组中超出新长度后面的元素。

"""
from typing import List


class Solution:
    def removeDuplicates(self, nums: List[int]) -> int:
        if len(nums) <= 2:
            return len(nums)
        slow = 0
        fast = 2
        while fast < len(nums):
            if nums[slow] != nums[fast]:
                nums[slow + 2] = nums[fast]
                slow += 1
            fast += 1
        return slow

    """
    通用解法
    为了让解法更具有一般性，我们将原问题的「保留 2 位」修改为「保留 k 位」。
    对于此类问题，我们应该进行如下考虑：
    由于是保留 k 个相同数字，对于前 k 个数字，我们可以直接保留
    对于后面的任意数字，能够保留的前提是：与当前写入的位置前面的第 k 个元素进行比较，不相同则保留
    举个🌰，我们令 k=2，假设有如下样例
    [1,1,1,1,1,1,2,2,2,2,2,2,3]
    首先我们先让前 2 位直接保留，得到 1,1
    对后面的每一位进行继续遍历，能够保留的前提是与 当前位置 的前面 k 个元素不同（答案中的第一个 1），因此我们会跳过剩余的 1，将第一个 2 追加，得到 1,1,2
    继续这个过程，这时候是和答案中的第 2 个 1 进行对比，因此可以得到 1,1,2,2
    这时候和答案中的第 1 个 2 比较，只有与其不同的元素能追加到答案，因此剩余的 2 被跳过，3 被追加到答案：1,1,2,2,3
    """
    def solve_normal(self, k, nums: List[int]) -> (int, List[int]):
        u = 0
        for x in nums:
            if u < k or nums[u - k] != x:
                nums[u] = x
                u += 1
        return u, nums

# 1、如果需要考虑超出新长度后面的元素呢？ 把新长度后面元素置0或者没有的一个数
# 记录下删除的数量， 从后往前遍历删除的个数置零即可，找到比第0位小的一个数置为它

# 2、如果需要考虑超出新长度后面的元素呢？ 其他原始元素保持相对位置？


if __name__ == '__main__':
    a = [1,1,1,1,1,1,2,2,2,2,2,2,3]
    s = Solution()
    b = s.solve_normal(3, a)
    print(b)

    a = [1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3]
    c = s.solve_normal(2, a)
    print(c)

    a = [1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3]
    d = s.solve_normal(4, a)
    print(d)
    pass