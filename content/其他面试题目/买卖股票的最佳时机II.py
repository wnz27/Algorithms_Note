'''
@Author: 27
@LastEditors: 27
@Date: 2020-03-20 19:06:34
@LastEditTime: 2020-03-20 19:14:03
@FilePath: /Algorithms_Note/其他面试题目/买卖股票的最佳时机II.py
@description: type some description
'''
'''
给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。
设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。
注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。

示例 1:
输入: [7,1,5,3,6,4]
输出: 7
解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 
这笔交易所能获得利润 = 5-1 = 4 。
随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 
这笔交易所能获得利润 = 6-3 = 3 。
示例 2:
输入: [1,2,3,4,5]
输出: 4
解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 
这笔交易所能获得利润 = 5-1 = 4 。
注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。
因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。
示例 3:
输入: [7,6,4,3,1]
输出: 0
解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。
'''
'''
每天都有三种「选择」:买入、卖出、无操作
这个问题的「状态」有三个，第一个是天 数，第二个是允许交易的最大次数，
第三个是当前的持有状态(即之前说的 rest 的状态，我们不妨用 1 表示持有，0 表示没有持有)
'''
class Solution(object):
    def maxProfit(self, prices):
        """
        :type prices: List[int]
        :rtype: int
        """
        d_i_0 = 0       # 第i天不持有，也就是说现在还没开始交易肯定不持有，允许交易的最大次数不会影响代码。
        d_i_1 = float("-inf")   # 现在还没开始交易，不可能持有，所以取负无穷来表示
        for price in prices:
            tmp = d_i_0     # 存储上一次不持有的利润值
            d_i_0 = max(d_i_0, d_i_1 + price)
            d_i_1 = max(d_i_1, tmp - price)
        return d_i_0
    